name: Branch and Commit Check

on:
  push:
    branches:
      - '**'
  pull_request:
    branches:
      - '**'

jobs:
  validate:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Fetch the entire commit history

      - name: Check Branch Name
        run: |
          BRANCH_NAME="${GITHUB_REF#refs/heads/}"
          if [[ $GITHUB_REF == refs/pull/* ]]; then
            BRANCH_NAME="${GITHUB_HEAD_REF}"
          fi

          # Allow deployment/ and merge/deployment/ branches without PAYB- requirement
          if [[ $BRANCH_NAME == deployment/* || $BRANCH_NAME == merge/deployment/* ]]; then
            echo "✅ Branch name is correctly formatted (deployment or merge/deployment): $BRANCH_NAME"
          else
            PATTERN="^(feature|bugfix|merge)\/(PAYB-[0-9]+)(-(dev|uat|stage|master))?$"
            if [[ ! $BRANCH_NAME =~ $PATTERN ]]; then
              echo "❌ Invalid branch name: $BRANCH_NAME"
              echo "Branch name must follow one of these formats:"
              echo "  - feature/PAYB-1234"
              echo "  - bugfix/PAYB-1234"
              echo "  - merge/PAYB-1234-dev, merge/PAYB-1234-uat, merge/PAYB-1234-stage, merge/PAYB-1234-master"
              echo "  - deployment/<any-name>"
              echo "  - merge/deployment/<any-name>"
              exit 1
            else
              TASK_ID="${BASH_REMATCH[2]}"  # Extract PAYB-xxxx
              echo "✅ Branch name is correctly formatted: $BRANCH_NAME"
              echo "TASK_ID=$TASK_ID" >> $GITHUB_ENV
            fi
          fi

      - name: Check Commit Messages
        run: |
          # Skip commit message check for deployment/ and merge/deployment/ branches
          if [[ $GITHUB_REF == refs/pull/* ]]; then
            BRANCH_NAME="${GITHUB_HEAD_REF}"
          else
            BRANCH_NAME="${GITHUB_REF#refs/heads/}"
          fi

          if [[ $BRANCH_NAME == deployment/* || $BRANCH_NAME == merge/deployment/* ]]; then
            echo "⏩ Skipping commit message check for deployment or merge/deployment branch: $BRANCH_NAME"
            exit 0
          fi

          git fetch --unshallow || git fetch --all

          # Get the latest non-merge commit message
          LATEST_COMMIT_MSG=$(git log --no-merges -1 --pretty=format:"%s")

          PATTERN="^PAYB-[0-9]+ - .+$"
          DESC_PATTERN="^PAYB-[0-9]+ - .{10,}$"

          if [[ -z "$LATEST_COMMIT_MSG" ]]; then
            echo "⚠️ Empty commit message found."
            exit 1
          fi

          if [[ ! $LATEST_COMMIT_MSG =~ $PATTERN ]]; then
            echo "❌ Invalid commit message: $LATEST_COMMIT_MSG"
            echo "Commit message must follow this format: 'PAYB-1234 - Description'"
            exit 1
          elif [[ ! $LATEST_COMMIT_MSG =~ $DESC_PATTERN ]]; then
            echo "❌ Commit message is too short. It should be at least 10 characters long after the task ID."
            exit 1
          fi

          # Extract TASK ID from commit message
          COMMIT_TASK_ID=$(echo "$LATEST_COMMIT_MSG" | grep -oE 'PAYB-[0-9]+')

          # Check if branch and commit task IDs match
          if [[ "$COMMIT_TASK_ID" != "$TASK_ID" ]]; then
            echo "❌ Branch task ID ($TASK_ID) and commit task ID ($COMMIT_TASK_ID) do not match!"
            exit 1
          else
            echo "✅ Commit message matches the branch task ID: $COMMIT_TASK_ID"
          fi
