name: Branch and Commit Check

on:
  push:
    branches:
      - '**'
  pull_request:
    branches:
      - '**'

jobs:
  validate:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Tüm commit geçmişini almak için

      - name: Check Branch Name
        run: |
          # Pull request'ten farklı olarak branch adı almak için
          if [[ $GITHUB_REF == refs/pull/* ]]; then
            BRANCH_NAME="${GITHUB_HEAD_REF}"
          else
            BRANCH_NAME="${GITHUB_REF#refs/heads/}"
          fi
          
          PATTERN="^(feature|bugfix|merge)\/PAYB-[0-9]+(-(dev|uat|stage|master))?$"
          echo "Branch: $BRANCH_NAME"
          if [[ ! $BRANCH_NAME =~ $PATTERN ]]; then
            echo "❌ Invalid branch name: $BRANCH_NAME"
            echo "Branch name must follow one of these formats:"
            echo "  - feature/PAYB-1234"
            echo "  - bugfix/PAYB-1234"
            echo "  - merge/PAYB-1234-dev, merge/PAYB-1234-uat, merge/PAYB-1234-stage, merge/PAYB-1234-master"
            exit 1
          else
            echo "✅ Branch name is correctly formatted: $BRANCH_NAME"
          fi

      - name: Check Commit Messages
        run: |
          # Ensure we have the latest remote information
          git fetch origin

          # Get the base branch (target branch) for pull requests
          if [[ $GITHUB_EVENT_NAME == "pull_request" ]]; then
            BASE_BRANCH="$GITHUB_BASE_REF"
          else
            BASE_BRANCH="$(git rev-parse --abbrev-ref HEAD)"
          fi

          # Get commit messages for the current branch and exclude merges
          COMMITS=$(git log origin/$BASE_BRANCH..HEAD --pretty=format:"%s" --no-merges)

          PATTERN="^PAYB-[0-9]+ - .+$"
          # Loop through commits
          while IFS= read -r COMMIT_MSG; do
            # Skip empty commit messages
            if [[ -z "$COMMIT_MSG" ]]; then
              echo "⚠️ Empty commit message found."
              continue
            fi

            if [[ ! $COMMIT_MSG =~ $PATTERN ]]; then
              echo "❌ Invalid commit message: $COMMIT_MSG"
              echo "Commit message must follow this format: 'PAYB-1234 - Description'"
              exit 1
            else
              # Check if commit message is descriptive enough
              DESC_PATTERN="^PAYB-[0-9]+ - .{10,}$"  # Minimum 10 characters for description
              if [[ ! $COMMIT_MSG =~ $DESC_PATTERN ]]; then
                echo "❌ Commit message is too short. It should be at least 10 characters long after the task ID."
                exit 1
              else
                echo "✅ Commit message is correctly formatted and descriptive: $COMMIT_MSG"
              fi
            fi
          done <<< "$COMMITS"